{"version":3,"sources":["components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css","components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js"],"names":["module","exports","checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","loading","orderHandler","event","a","formElemId","preventDefault","formData","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","url","component","input","inputElement","inputClasses","InputElement","Invalid","onChange","join","option","validationError","ValidationError","Label","label"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,MAAQ,qBAAqB,aAAe,4BAA4B,QAAU,uBAAuB,gBAAkB,iC,oBCA1KD,EAAOC,QAAU,CAAC,gBAAkB,2C,oBCApCD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,MAAQ,6B,0ICqB1DC,EAjBS,SAACC,GACvB,OACE,yBAAKC,UAAWC,IAAQC,iBACtB,uDACA,yBAAKC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,SACnC,kBAACC,EAAA,EAAD,CAAQC,YAAaR,EAAMQ,eAE7B,kBAACC,EAAA,EAAD,CAAQC,QAAQ,SAASC,QAASX,EAAMY,mBAAxC,UAGA,kBAACH,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAASX,EAAMa,mBAAzC,c,kGCHAC,E,4MACJC,MAAQ,CACNC,UAAW,CACTC,KAAM,CACJC,YAAa,QACbC,cAAe,CACbC,KAAM,OACNC,YAAa,aAEfC,MAAO,GACPC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPC,SAAS,GAEXC,OAAQ,CACNT,YAAa,QACbC,cAAe,CACbC,KAAM,OACNC,YAAa,UAEfC,MAAO,GACPC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPC,SAAS,GAEXE,QAAS,CACPV,YAAa,QACbC,cAAe,CACbC,KAAM,OACNC,YAAa,gBAEfC,MAAO,GACPC,WAAY,CACVC,UAAU,EACVK,UAAW,EACXC,UAAW,EACXC,WAAW,GAEbN,OAAO,EACPC,SAAS,GAEXM,QAAS,CACPd,YAAa,QACbC,cAAe,CACbC,KAAM,OACNC,YAAa,WAEfC,MAAO,GACPC,WAAY,CACVC,UAAU,GAEZC,OAAO,EACPC,SAAS,GAEXO,MAAO,CACLf,YAAa,QACbC,cAAe,CACbC,KAAM,QACNC,YAAa,eAEfC,MAAO,GACPC,WAAY,CACVC,UAAU,EACVU,SAAS,GAEXT,OAAO,EACPC,SAAS,GAEXS,eAAgB,CACdjB,YAAa,SACbC,cAAe,CACbiB,QAAS,CACP,CAAEd,MAAO,UAAWe,aAAc,WAClC,CACEf,MAAO,WACPe,aAAc,cAIpBf,MAAO,UACPC,WAAY,GACZE,OAAO,IAGXa,aAAa,EACbC,SAAS,G,EAGXC,a,uCAAe,WAAOC,GAAP,mBAAAC,EAAA,sDAGb,IAASC,KAFTF,EAAMG,iBACAC,EAAW,GACM,EAAK9B,MAAMC,UAChC6B,EAASF,GAAc,EAAK5B,MAAMC,UAAU2B,GAAYrB,MAEpDwB,EAAQ,CACZtC,YAAa,EAAKR,MAAM+C,KACxBC,MAAO,EAAKhD,MAAMgD,MAClBC,UAAWJ,EACXK,OAAQ,EAAKlD,MAAMkD,QAGrB,EAAKlD,MAAMmD,cAAcL,EAAO,EAAK9C,MAAMoD,OAb9B,2C,wDAgBfC,oBAAsB,SAACZ,EAAOa,GAC5B,IAAMC,EAAqBC,YAAa,EAAKzC,MAAMC,UAAUsC,GAAkB,CAC7EhC,MAAOmB,EAAMgB,OAAOnC,MACpBG,MAAOiC,YAAcjB,EAAMgB,OAAOnC,MAAO,EAAKP,MAAMC,UAAUsC,GAAiB/B,YAC/EG,SAAS,IAGLiC,EAAmBH,YAAa,EAAKzC,MAAMC,UAAZ,eAClCsC,EAAkBC,IAGjBjB,GAAc,EAClB,IAAK,IAAIgB,KAAmBK,EAC1BrB,EAAcqB,EAAiBL,GAAiB7B,OAASa,EAE3D,EAAKsB,SAAS,CAAE5C,UAAW2C,EAAkBrB,YAAaA,K,uDAGlD,IAAD,OACDuB,EAAoB,GAC1B,IAAK,IAAIC,KAAOC,KAAKhD,MAAMC,UACzB6C,EAAkBG,KAAK,CACrBC,GAAIH,EACJI,OAAQH,KAAKhD,MAAMC,UAAU8C,KAIjC,IAAIK,EACF,0BAAMC,SAAUL,KAAKvB,cAClBqB,EAAkBQ,KAAI,SAACC,GAAD,OACrB,kBAACC,EAAA,EAAD,CACET,IAAKQ,EAAYL,GACjB/C,YAAaoD,EAAYJ,OAAOhD,YAChCC,cAAemD,EAAYJ,OAAO/C,cAClCG,MAAOgD,EAAYJ,OAAO5C,MAC1BkD,SAAUF,EAAYJ,OAAOzC,MAC7BgD,eAAgBH,EAAYJ,OAAO3C,WACnCG,QAAS4C,EAAYJ,OAAOxC,QAC5BgD,QAAS,SAACjC,GAAD,OAAW,EAAKY,oBAAoBZ,EAAO6B,EAAYL,UAGpE,kBAACxD,EAAA,EAAD,CAAQC,QAAQ,UAAUiE,UAAWZ,KAAKhD,MAAMuB,aAAhD,UAQJ,OAHIyB,KAAK/D,MAAMuC,UACb4B,EAAO,kBAACS,EAAA,EAAD,OAGP,yBAAK3E,UAAWC,IAAQY,aACtB,uDACCqD,O,GAhKiBU,aAsLXC,eAhBS,SAAC/D,GACvB,MAAO,CACLgC,KAAMhC,EAAMgE,cAAcvE,YAC1BwC,MAAOjC,EAAMgE,cAAcC,WAC3BzC,QAASxB,EAAM+B,MAAMP,QACrBa,MAAOrC,EAAMkE,KAAK7B,MAClBF,OAAQnC,EAAMkE,KAAK/B,WAII,SAACgC,GAC1B,MAAO,CACL/B,cAAe,SAACF,EAAWG,GAAZ,OAAsB8B,EAASC,IAAuBlC,EAAWG,QAIrE0B,CACbM,YAAiBtE,EAAauE,KAC9BA,KC7LIC,E,4MACJC,yBAA2B,WACzB,EAAKvF,MAAMwF,QAAQC,U,EAGrBC,yBAA2B,WACzB,EAAK1F,MAAMwF,QAAQG,QAAQ,2B,uDAI3B,IAAIC,EAAU,kBAAC,IAAD,CAAUC,GAAG,MAC3B,GAAI9B,KAAK/D,MAAM+C,KAAM,CACnB,IAAM+C,EAAoB/B,KAAK/D,MAAM+F,UAAY,kBAAC,IAAD,CAAUF,GAAG,MAAS,KAEvED,EACE,6BACGE,EACD,kBAAC3F,EAAD,CACEK,YAAauD,KAAK/D,MAAM+C,KACxBnC,kBAAmBmD,KAAKwB,yBACxB1E,kBAAmBkD,KAAK2B,2BAE1B,kBAAC,IAAD,CAAOM,KAAMjC,KAAK/D,MAAMiG,MAAMC,IAAM,gBAAiBC,UAAWrF,KAItE,OAAO8E,M,GA1BYf,aAsCRC,uBARS,SAAC/D,GACvB,MAAO,CACLgC,KAAMhC,EAAMgE,cAAcvE,YAC1BwC,MAAOjC,EAAMgE,cAAcC,WAC3Be,UAAWhF,EAAM+B,MAAMiD,aAIZjB,CAAyBQ,I,gCC7CxC,sCAmEec,IAhED,SAACpG,GACb,IAAIqG,EAAe,KACbC,EAAe,CAACpG,IAAQqG,cAM9B,OAJIvG,EAAMwE,SAAWxE,EAAMyE,gBAAkBzE,EAAM0B,SACjD4E,EAAatC,KAAK9D,IAAQsG,SAGpBxG,EAAMkB,aACZ,IAAK,QACHmF,EACE,yCACEI,SAAUzG,EAAM0E,QAChBzE,UAAWqG,EAAaI,KAAK,MACzB1G,EAAMmB,cAHZ,CAIEG,MAAOtB,EAAMsB,SAGjB,MACF,IAAK,WACH+E,EACE,4CACEI,SAAUzG,EAAM0E,QAChBzE,UAAWqG,EAAaI,KAAK,MACzB1G,EAAMmB,cAHZ,CAIEG,MAAOtB,EAAMsB,SAGjB,MACF,IAAK,SACH+E,EACE,4BAAQI,SAAUzG,EAAM0E,QAASzE,UAAWqG,EAAaI,KAAK,KAAMpF,MAAOtB,EAAMsB,OAC9EtB,EAAMmB,cAAciB,QAAQiC,KAAI,SAACsC,GAAD,OAC/B,4BAAQ7C,IAAK6C,EAAOrF,MAAOA,MAAOqF,EAAOrF,OACtCqF,EAAOtE,kBAKhB,MACF,QACEgE,EACE,yCACEI,SAAUzG,EAAM0E,QAChBzE,UAAWqG,EAAaI,KAAK,MACzB1G,EAAMmB,cAHZ,CAIEG,MAAOtB,EAAMsB,SAKrB,IAAIsF,EAAkB,KAKtB,OAJI5G,EAAMwE,SAAWxE,EAAM0B,UACzBkF,EAAkB,uBAAG3G,UAAWC,IAAQ2G,iBAAtB,gCAIlB,yBAAK5G,UAAWC,IAAQqE,OACtB,2BAAOtE,UAAWC,IAAQ4G,OAAQ9G,EAAM+G,OACvCV,EACAO","file":"static/js/3.3d1623c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__32RJl\",\"Label\":\"Input_Label__308bE\",\"InputElement\":\"Input_InputElement__1YP5T\",\"Invalid\":\"Input_Invalid__3-TkQ\",\"ValidationError\":\"Input_ValidationError__DIf32\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__2egzu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3iw4p\",\"Input\":\"ContactData_Input__SiCJE\"};","import React from 'react'\r\nimport Burger from '../../Burger/Burger'\r\nimport Button from '../../UI/Button/Button'\r\nimport classes from './CheckoutSummary.module.css'\r\n\r\nconst checkoutSummary = (props) => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>We hope it tastes well!</h1>\r\n      <div style={{ width: '100%', margin: 'auto' }}>\r\n        <Burger ingredients={props.ingredients} />\r\n      </div>\r\n      <Button btnType='Danger' clicked={props.checkoutCancelled}>\r\n        CANCEL\r\n      </Button>\r\n      <Button btnType='Success' clicked={props.checkoutContinued}>\r\n        CONTINUE\r\n      </Button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default checkoutSummary\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport axios from '../../../axios-orders'\r\nimport { updateObject, checkValidity } from '../../../shared/Utility'\r\nimport * as actions from '../../../store/actions/index'\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\r\nimport classes from './ContactData.module.css'\r\nimport Button from '../../../components/UI/Button/Button'\r\nimport Spinner from '../../../components/UI/Spinner/Spinner'\r\nimport Input from '../../../components/UI/Input/Input'\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Your Name'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      street: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Street'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      zipCode: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Your Zipcode'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5,\r\n          isNumeric: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      country: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'text',\r\n          placeholder: 'Country'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      email: {\r\n        elementType: 'email',\r\n        elementConfig: {\r\n          type: 'email',\r\n          placeholder: 'Your E-mail'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          isEmail: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      deliveryMethod: {\r\n        elementType: 'select',\r\n        elementConfig: {\r\n          options: [\r\n            { value: 'fastest', displayValue: 'Fastest' },\r\n            {\r\n              value: 'cheapest',\r\n              displayValue: 'Cheapest'\r\n            }\r\n          ]\r\n        },\r\n        value: 'fastest',\r\n        validation: {},\r\n        valid: true\r\n      }\r\n    },\r\n    formIsValid: false,\r\n    loading: false\r\n  }\r\n\r\n  orderHandler = async (event) => {\r\n    event.preventDefault()\r\n    const formData = {}\r\n    for (let formElemId in this.state.orderForm) {\r\n      formData[formElemId] = this.state.orderForm[formElemId].value\r\n    }\r\n    const order = {\r\n      ingredients: this.props.ings,\r\n      price: this.props.price,\r\n      orderData: formData,\r\n      userId: this.props.userId\r\n    }\r\n\r\n    this.props.onOrderBurger(order, this.props.token)\r\n  }\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n      value: event.target.value,\r\n      valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n      touched: true\r\n    })\r\n\r\n    const updatedOrderForm = updateObject(this.state.orderForm, {\r\n      [inputIdentifier]: updatedFormElement\r\n    })\r\n\r\n    let formIsValid = true\r\n    for (let inputIdentifier in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid\r\n    }\r\n    this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid })\r\n  }\r\n\r\n  render() {\r\n    const formElementsArray = []\r\n    for (let key in this.state.orderForm) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.orderForm[key]\r\n      })\r\n    }\r\n\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {formElementsArray.map((formElement) => (\r\n          <Input\r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n          />\r\n        ))}\r\n        <Button btnType='Success' disabled={!this.state.formIsValid}>\r\n          ORDER\r\n        </Button>\r\n      </form>\r\n    )\r\n    if (this.props.loading) {\r\n      form = <Spinner />\r\n    }\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h4>Enter your Contact Data</h4>\r\n        {form}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(\r\n  withErrorHandler(ContactData, axios),\r\n  axios\r\n)\r\n","import React, { Component } from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary'\r\nimport ContactData from './ContactData/ContactData'\r\n\r\nclass Checkout extends Component {\r\n  checkoutCancelledHandler = () => {\r\n    this.props.history.goBack()\r\n  }\r\n\r\n  checkoutContinuedHandler = () => {\r\n    this.props.history.replace('/checkout/contact-data')\r\n  }\r\n\r\n  render() {\r\n    let summary = <Redirect to='/' />\r\n    if (this.props.ings) {\r\n      const purchasedRedirect = this.props.purchased ? <Redirect to='/' /> : null\r\n\r\n      summary = (\r\n        <div>\r\n          {purchasedRedirect}\r\n          <CheckoutSummary\r\n            ingredients={this.props.ings}\r\n            checkoutCancelled={this.checkoutCancelledHandler}\r\n            checkoutContinued={this.checkoutContinuedHandler}\r\n          />\r\n          <Route path={this.props.match.url + '/contact-data'} component={ContactData} />\r\n        </div>\r\n      )\r\n    }\r\n    return summary\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    purchased: state.order.purchased\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Checkout)\r\n","import React from 'react'\r\nimport classes from './Input.module.css'\r\n\r\nconst input = (props) => {\r\n  let inputElement = null\r\n  const inputClasses = [classes.InputElement]\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid)\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case 'input':\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      )\r\n      break\r\n    case 'textarea':\r\n      inputElement = (\r\n        <textarea\r\n          onChange={props.changed}\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      )\r\n      break\r\n    case 'select':\r\n      inputElement = (\r\n        <select onChange={props.changed} className={inputClasses.join(' ')} value={props.value}>\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      )\r\n      break\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      )\r\n  }\r\n\r\n  let validationError = null\r\n  if (props.invalid && props.touched) {\r\n    validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n      {validationError}\r\n    </div>\r\n  )\r\n}\r\nexport default input\r\n"],"sourceRoot":""}