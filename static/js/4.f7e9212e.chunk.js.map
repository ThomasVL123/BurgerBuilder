{"version":3,"sources":["components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","rules","isValid","trim","length","test","maxLength","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","onChange","join","options","option","displayValue","validationError","ValidationError","Input","Label","label"],"mappings":"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","file":"static/js/4.f7e9212e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__32RJl\",\"Label\":\"Input_Label__308bE\",\"InputElement\":\"Input_InputElement__1YP5T\",\"Invalid\":\"Input_Invalid__3-TkQ\",\"ValidationError\":\"Input_ValidationError__DIf32\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1VP9D\",\"Input\":\"Auth_Input__30K8Q\",\"ContactData\":\"Auth_ContactData__2GS5H\"};","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nimport { updateObject, checkValidity } from '../../shared/Utility'\r\nimport * as actions from '../../store/actions/index'\r\nimport classes from './Auth.module.css'\r\nimport Input from '../../components/UI/Input/Input'\r\nimport Button from '../../components/UI/Button/Button'\r\nimport Spinner from '../../components/UI/Spinner/Spinner'\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'email',\r\n          placeholder: 'Mail Address'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          isEmail: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      password: {\r\n        elementType: 'input',\r\n        elementConfig: {\r\n          type: 'password',\r\n          placeholder: 'Password'\r\n        },\r\n        value: '',\r\n        validation: {\r\n          required: true,\r\n          minLength: 6\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      }\r\n    },\r\n    isSignup: true\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n      this.props.onSetAuthRedirectPath()\r\n    }\r\n  }\r\n\r\n  checkValidity(value, rules) {\r\n    let isValid = true\r\n    if (rules.required) {\r\n      isValid = value.trim() !== '' && isValid\r\n    }\r\n    if (rules.minLength) {\r\n      isValid = value.length >= rules.minLength && isValid\r\n    }\r\n    if (rules.isEmail) {\r\n      // eslint-disable-next-line no-useless-escape\r\n      const pattern = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n      isValid = pattern.test(value) && isValid\r\n    }\r\n    if (rules.maxLength) {\r\n      isValid = value.length <= rules.maxLength && isValid\r\n    }\r\n    return isValid\r\n  }\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(this.state.controls, {\r\n      [controlName]: updateObject(this.state.controls[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n        touched: true\r\n      })\r\n    })\r\n    this.setState({ controls: updatedControls })\r\n  }\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault()\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignup\r\n    )\r\n  }\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState((prevState) => {\r\n      return { isSignup: !prevState.isSignup }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const formElementsArray = []\r\n    for (let key in this.state.controls) {\r\n      formElementsArray.push({\r\n        id: key,\r\n        config: this.state.controls[key]\r\n      })\r\n    }\r\n\r\n    let form = formElementsArray.map((formElement) => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        invalid={!formElement.config.valid}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n        changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n      />\r\n    ))\r\n\r\n    if (this.props.loading) {\r\n      form = <Spinner />\r\n    }\r\n\r\n    let errorMessage = null\r\n    if (this.props.error) {\r\n      errorMessage = <p>{this.props.error.message}</p>\r\n    }\r\n\r\n    let authRedirect = null\r\n    if (this.props.isAuthenticated) {\r\n      authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n    }\r\n    return (\r\n      <div className={classes.Auth}>\r\n        {authRedirect}\r\n        {errorMessage}\r\n        <form onSubmit={this.submitHandler}>\r\n          {form}\r\n          <Button btnType='Success'>SUBMIT</Button>\r\n        </form>\r\n        <Button clicked={this.switchAuthModeHandler} btnType='Danger'>\r\n          SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}\r\n        </Button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    buildingBurger: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignup) => {\r\n      dispatch(actions.auth(email, password, isSignup))\r\n    },\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)\r\n","import React from 'react'\r\nimport classes from './Input.module.css'\r\n\r\nconst input = (props) => {\r\n  let inputElement = null\r\n  const inputClasses = [classes.InputElement]\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid)\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case 'input':\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      )\r\n      break\r\n    case 'textarea':\r\n      inputElement = (\r\n        <textarea\r\n          onChange={props.changed}\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      )\r\n      break\r\n    case 'select':\r\n      inputElement = (\r\n        <select onChange={props.changed} className={inputClasses.join(' ')} value={props.value}>\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      )\r\n      break\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          onChange={props.changed}\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        />\r\n      )\r\n  }\r\n\r\n  let validationError = null\r\n  if (props.invalid && props.touched) {\r\n    validationError = <p className={classes.ValidationError}>Please enter a valid value!</p>\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputElement}\r\n      {validationError}\r\n    </div>\r\n  )\r\n}\r\nexport default input\r\n"],"sourceRoot":""}