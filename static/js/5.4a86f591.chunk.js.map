{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","order","props","ingredients","ingredientName","push","name","amount","ingredientOutput","map","ingredient","key","style","textTransform","display","margin","border","padding","className","classes","Order","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","Spinner","loading","id","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,MAAQ,uB,0ICuCXC,EArCD,SAACC,GACb,IAAMC,EAAc,GAEpB,IAAK,IAAIC,KAAkBF,EAAMC,YAC/BA,EAAYE,KAAK,CACfC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAI9B,IAAMI,EAAmBL,EAAYM,KAAI,SAACC,GACxC,OACE,0BACEC,IAAKD,EAAWJ,KAChBM,MAAO,CACLC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,QAGVP,EAAWJ,KAVd,KAUsBI,EAAWH,OAVjC,QAeJ,OACE,yBAAKW,UAAWC,IAAQC,OACtB,2CAAiBZ,GACjB,qCACS,uCAAaN,EAAMmB,MAAMC,QAAQ,O,QCzB1CC,E,kLAEFC,KAAKtB,MAAMuB,cAAcD,KAAKtB,MAAMwB,MAAOF,KAAKtB,MAAMyB,U,+BAItD,IAAIC,EAAS,kBAACC,EAAA,EAAD,MAMb,OALKL,KAAKtB,MAAM4B,UACdF,EAASJ,KAAKtB,MAAM0B,OAAOnB,KAAI,SAACR,GAAD,OAC7B,kBAACmB,EAAD,CAAOT,IAAKV,EAAM8B,GAAI5B,YAAaF,EAAME,YAAakB,OAAQpB,EAAMoB,YAGjE,6BAAMO,O,GAZII,aA+BNC,uBAfS,SAACC,GACvB,MAAO,CACLN,OAAQM,EAAMjC,MAAM2B,OACpBE,QAASI,EAAMjC,MAAM6B,QACrBJ,MAAOQ,EAAMC,KAAKT,MAClBC,OAAQO,EAAMC,KAAKR,WAII,SAACS,GAC1B,MAAO,CACLX,cAAe,SAACC,EAAOC,GAAR,OAAmBS,EAASC,IAAoBX,EAAOC,QAI3DM,CAA6CK,YAAiBf,EAAQgB","file":"static/js/5.4a86f591.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__3zcr1\"};","import React from 'react'\r\nimport classes from './Order.module.css'\r\n\r\nconst order = (props) => {\r\n  const ingredients = []\r\n\r\n  for (let ingredientName in props.ingredients) {\r\n    ingredients.push({\r\n      name: ingredientName,\r\n      amount: props.ingredients[ingredientName],\r\n    })\r\n  }\r\n\r\n  const ingredientOutput = ingredients.map((ingredient) => {\r\n    return (\r\n      <span\r\n        key={ingredient.name}\r\n        style={{\r\n          textTransform: 'capitalize',\r\n          display: 'inline-block',\r\n          margin: '0 8px',\r\n          border: '1px solid #ccc',\r\n          padding: '5px',\r\n        }}\r\n      >\r\n        {ingredient.name} ({ingredient.amount})\r\n      </span>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <div className={classes.Order}>\r\n      <p>Ingredients: {ingredientOutput}</p>\r\n      <p>\r\n        Price: <strong>EUR {props.price.toFixed(2)}</strong>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default order\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nimport axios from '../../axios-orders'\r\nimport * as actions from '../../store/actions/index'\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler'\r\nimport Order from '../../components/Order/Order'\r\nimport Spinner from '../../components/UI/Spinner/Spinner'\r\n\r\nclass Orders extends Component {\r\n  componentDidMount() {\r\n    this.props.onFetchOrders(this.props.token, this.props.userId)\r\n  }\r\n\r\n  render() {\r\n    let orders = <Spinner />\r\n    if (!this.props.loading) {\r\n      orders = this.props.orders.map((order) => (\r\n        <Order key={order.id} ingredients={order.ingredients} price={+order.price} />\r\n      ))\r\n    }\r\n    return <div>{orders}</div>\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    orders: state.order.orders,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios))\r\n"],"sourceRoot":""}